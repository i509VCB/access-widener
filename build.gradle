plugins {
	id "java"
	id "java-library"
	id "checkstyle"
	id "maven-publish"
	id "com.diffplug.spotless" version "5.8.2"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group "net.fabricmc"
archivesBaseName = "access-widener"

def ENV = System.getenv()
version = "1.0.0"
logger.lifecycle("Building Accesswidener: " + version)

repositories {
	mavenCentral()

	maven {
		name = "Fabric"
		url = "https://maven.fabricmc.net/"
	}
}

dependencies {
	def asmVersion = "9.0"

	api "org.ow2.asm:asm:$asmVersion"
	api "org.ow2.asm:asm-commons:$asmVersion" // For Remapper
}

checkstyle {
	configFile = project.file("checkstyle.xml")
	toolVersion = "8.31"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier = 'javadoc'
	from javadoc.destinationDir
}

spotless {
	java {
		// Only update license headers when changes have occurred
		ratchetFrom "master"

		licenseHeaderFile(rootProject.file("HEADER"))
				.yearSeparator(", ")
	}

	// Spotless skips `package-info.java` and `module-info.java` files.
	// For now we just cover package-info since we are not project jigsaw yet, so we do some witchcraft to allow it
	format "package-info", {
		target "**/package-info.java"

		// Only update license headers when changes have occurred
		ratchetFrom "master"

		// Regex is `/**` or `package`
		it.licenseHeaderFile(rootProject.file("HEADER"), "/\\*\\*|package")
				.yearSeparator(", ")
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java

			artifact(sourcesJar)
			artifact(javadocJar)
		}
	}

	repositories {
		mavenLocal()

		if (ENV.MAVEN_URL) {
			repositories.maven {
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		}
	}
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
	doFirst {
		def xml = new URL("https://maven.fabricmc.net/net/fabricmc/access-widener/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}

publish.mustRunAfter checkVersion
